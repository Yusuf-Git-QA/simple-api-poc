name: Build and deploy ASP.Net Core app to Azure Web App

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: choco install jq -y
        shell: powershell

      - name: Validate and Transition Jira Ticket
        id: validate-jira
        shell: bash
        env:
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        run: |
          echo "üîç Checking commit message for Jira ticket ID..."
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          JIRA_ID=$(echo "$COMMIT_MSG" | grep -Eo '[A-Z]{2,}-[0-9]+' | head -n1)

          if [ -z "$JIRA_ID" ]; then
            echo "‚ùå No Jira ticket ID found in commit message (e.g., CPG-7)."
            exit 1
          fi

          echo "‚úÖ Found Jira ticket ID: $JIRA_ID"
          echo "jira_id=$JIRA_ID" >> $GITHUB_OUTPUT
          echo "commit_msg=$COMMIT_MSG" >> $GITHUB_OUTPUT

          echo "üåê Fetching Jira issue details..."
          RESPONSE=$(curl -s -u "$JIRA_USER_EMAIL:$JIRA_TOKEN" \
            -H "Accept: application/json" \
            "$JIRA_BASE_URL/rest/api/3/issue/$JIRA_ID")

          ERROR_MSG=$(echo "$RESPONSE" | jq -r '.errorMessages[0]')
          if [ "$ERROR_MSG" != "null" ]; then
            echo "‚ùå Jira API error: $ERROR_MSG"
            exit 1
          fi

          STATUS=$(echo "$RESPONSE" | jq -r '.fields.status.name')
          echo "üé´ Ticket current status: $STATUS"

          if [[ "$STATUS" == "Done" || "$STATUS" == "Closed" ]]; then
            echo "‚ùå Cannot proceed: Jira ticket is already '$STATUS'."
            exit 1
          fi

          echo "‚úÖ Jira ticket is valid. Attempting transition to 'Done'..."

          curl -s -X POST \
            -u "$JIRA_USER_EMAIL:$JIRA_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{ "transition": { "id": "31" } }' \
            "$JIRA_BASE_URL/rest/api/3/issue/$JIRA_ID/transitions"

          echo "‚úÖ Jira ticket $JIRA_ID transitioned to Done (if allowed)."

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'

      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner
        shell: pwsh

      - name: Add .NET tools to PATH
        run: echo "$env:USERPROFILE\.dotnet\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Begin SonarCloud Analysis
        run: |
          dotnet sonarscanner begin `
            /k:"Yusuf-Git-QA_simple-api-poc" `
            /o:"yusuf-git-qa" `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.analysis.jira_ticket="${{ steps.validate-jira.outputs.jira_id }}"
        shell: pwsh

      - name: Restore dependencies
        run: dotnet restore
        shell: pwsh

      - name: Build with dotnet
        run: dotnet build --configuration Release
        shell: pwsh

      - name: End SonarCloud Analysis
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        shell: pwsh

      - name: dotnet publish
        run: dotnet publish -c Release -o "${{env.DOTNET_ROOT}}/myapp"
        shell: pwsh

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Production'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_5B8BED1876EF4B08A10702C862F0A3E7 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_E072FF9627C74742A3407D0183CF416D }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_635A032F9D6F4680A3F189963E54CA47 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'SimeWebAPI'
          slot-name: 'Production'
          package: .

      - name: Set custom deployment message with Jira ID
        env:
          APP_NAME: SimeWebAPI
          DEPLOY_USER: ${{ secrets.AZURE_DEPLOY_USER }}
          DEPLOY_PASSWORD: ${{ secrets.AZURE_DEPLOY_PASSWORD }}
          JIRA_ID: ${{ needs.build.outputs.jira_id || 'UNKNOWN' }}
          COMMIT_MSG: ${{ github.event.head_commit.message }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          echo "üì¶ Sending custom message to Kudu deployment history..."
          curl -X POST "https://simewebapi-e8d5byc6bcercja7.scm.canadacentral-01.azurewebsites.net/api/deployments" \
            -u "$DEPLOY_USER:$DEPLOY_PASSWORD" \
            -H "Content-Type: application/json" \
            -d '{
              "id": "'"$GITHUB_SHA"'",
              "message": "'"$JIRA_ID: $COMMIT_MSG"'",
              "author": "GitHub Actions",
              "deployer": "CI/CD Pipeline"
            }'
        shell: bash
